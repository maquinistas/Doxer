// Passenger Side
@api_view(['POST'])
def PassengerSendMSG(request,pid,did):
    try:
        msg = request.data['message']
        getpas = Passanger.objects.get(id=pid)
        getdri = Driver.objects.get(id=did)
        mg = Message.objects.create(
            sender_passenger = getpas,
            receiver_driver = getdri,
            message = msg,
        )
        return Response({"status":1,"msg":"Message Is Send.."})
    except ObjectDoesNotExist:
        return Response({"status": 0, "msg" : "Id IS wrong"})

@api_view(['GET'])
def PassengerViewOwnMsg(request,pid,did):
    try:
        msg = Message.objects.filter(sender_passenger=pid,receiver_driver=did,is_read=False) .filter(sender_driver=None,receiver_passenger=None,is_read=False)
        serial = sendByPassengerMessageSerializer(msg,many=True)
        return Response(serial.data)
    except ObjectDoesNotExist:
        return Response({"status": 0, "msg" : "Id IS wrong"})

@api_view(['GET'])
def Driver_sMsg(request,pid,did):
    try:
        msg = Message.objects.filter(sender_driver=did,receiver_passenger=pid,is_read=False)
        serial = sendBydriverMessageSerializer(msg,many=True)
        return Response(serial.data)
    except ObjectDoesNotExist:
        return Response({"status": 0, "msg" : "Id IS wrong"})


// Driver Side 

@api_view(['POST'])
def DriverSendMSG(request,pid,did):
    try:
        msg = request.data['message']
        getpas = Passanger.objects.get(id=pid)
        getdri = Driver.objects.get(id=did)
        mg = Message.objects.create(
            sender_driver = getdri,
            receiver_passenger = getpas,
            message = msg,
        )
        return Response({"status":1,"msg":"Message Is Send.."})
    except ObjectDoesNotExist:
        return Response({"status":0,"msg":"Wrong Id"})

@api_view(['GET'])
def DriverViewOwnMsg(request,pid,did):
    try:
        msg = Message.objects.filter(sender_driver=did,receiver_passenger=pid,is_read=False)
        serial = sendBydriverMessageSerializer(msg,many=True)
        return Response(serial.data)
    except ObjectDoesNotExist:
        return Response({"status":0,"msg":"Wrong Id"})

@api_view(['GET'])
def Passenger_sMsgView(request,pid,did):
    try:
        msg = Message.objects.filter(sender_passenger=pid,receiver_driver=did,is_read=False)
        serial = sendByPassengerMessageSerializer(msg,many=True)
        return Response(serial.data)
    except ObjectDoesNotExist:
        return Response({"status":0,"msg":"Wrong Id"})


# Massages Url
#--> path(r"passenger/send/driver/msg/<str:pid>/<str:did>/",passenger.PassengerSendMSG),    <--#
#--> path(r"passenger/view/driver/msg/<str:pid>/<str:did>/",passenger.PassengerViewOwnMsg), <--#
#--> path(r"passenger/view-msg/driver/<str:pid>/<str:did>/",passenger.Driver_sMsg),         <--#
#--> path(r"driver/send/passenger/msg/<str:did>/<str:pid>/",driver.DriverSendMSG),          <--#
#--> path(r"driver/view/passenger/msg/<str:did>/<str:pid>/",driver.DriverViewOwnMsg),       <--#
#--> path(r"driver/view-msg/passenger/<str:did>/<str:pid>/",driver.Passenger_sMsgView),     <--#


@api_view(['POST'])
def SearchForRideagain(request,dd):
    data = request.data
    pickup = data["pickUp"].casefold()
    dropout = data["dropout"].casefold()
    date = data["date"]
    seat = data['seat']
    # pcity = Cities.objects.filter(name=pickup)
    # dcity = Cities.objects.filter(name=dropout)
    pp = Ride.objects.filter(ride_type=dd,pickUp=pickup,dropout=dropout,date=date,seats__range=[seat,"10"],status='0',trip_status='P')
    if len(pp) > 0:
        serial = Filterserializer(pp,many=True)
        return Response({'status':1 ,"msg":"Success", 'data':serial.data})    
    else:
        return Response({'status':0 ,"msg":"No Record Founded"})   
